<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android闹钟AlarmManager]]></title>
      <url>2017%2F01%2F03%2FAndroid%E9%97%B9%E9%92%9FAlarmManager%2F</url>
      <content type="text"><![CDATA[Android 闹钟开发设置]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android心率曲线]]></title>
      <url>2017%2F01%2F03%2FAndroid%E5%BF%83%E7%8E%87%E6%9B%B2%E7%BA%BF%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[博客模板]]></title>
      <url>2016%2F11%2F01%2F%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo 常用命令]]></title>
      <url>2016%2F11%2F01%2Fhexo%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93%2F</url>
      <content type="text"><![CDATA[由于本人很久时间没有写博客，所以以前学习的很多关于hexo的命令知识点都忘了，所以下面罗列一下。 Hexo 安装、升级以及初始化 npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 hexo 各种命令简写 hexo n &quot;博客名称&quot; =&gt; hexo new &quot;博客名称&quot; #这两个都是创建新文章，前者是简写模式 hexo p =&gt; hexo publish hexo g =&gt; hexo generate #生成 hexo s =&gt; hexo server #启动服务预览 hexo d =&gt; hexo deploy #部署 Hexo服务器 hexo server #Hexo 会监视文件变动并自动更新，无须重启服务器。 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义IP hexo clean #清除缓存，网页正常情况下可以忽略此条命令 hexo g #生成静态网页 hexo d #开始部署 Hexo 监视文件变动 hexo generate #使用Hexo生成静态文件 hexo generate --watch #监视文件变动 Hexo 完成后部署 两个命令的作用是相同的 hexo generate --deploy hexo deploy --generate hexo deploy -g hexo server -g Hexo 草稿 hexo publish [layout] &lt;title&gt; Hexo 模板 title: 博客模板 date: 2016-11-01 16:32:43 categories: 工具 tags: - 博客模板 Hexo Next主题设置文章摘要 # Automatically Excerpt. Not recommand. # Please use &lt;!-- more --&gt; in the post to control excerpt accurately. auto_excerpt: enable: true length: 150 或者是用以下方法： 以上是文章摘要 &lt;!--more--&gt; 以下是余下全文 Hexo 写文章命令流程 hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub Hexo 写作命令 hexo new page &lt;title&gt; hexo new post &lt;title&gt; hexo 推送到服务器上 hexo n #写文章 hexo g #生成 hexo d #部署 #可与hexo g合并为 hexo d -g]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git日常使用命令]]></title>
      <url>2016%2F11%2F01%2FGit%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[常用Git命令清单 Git是版本控制工具，和SVN一样可以用来管理控制代码版本，Git在Github和Android Studio的使用比较多，但是由于公司使用的SVN的版本的控制工具，所以不是很常用Git命令，时间一久就容易忘记，所以记下来一下Git 常用的命令。 - workSpace:工作区 - Index/Stage:暂存区 - Repository:仓库区 - Remote:远程仓库 新建代码库 # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史 $ git clone [url] 配置Git Git的配置文件为.gitconfig,它可以在用户的主目录下（全局配置），也可以在项目目录下（项目配置）。 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [-- global] user.name &quot;[name]&quot; $ git config [-- global] user.email &quot;[email.addresss]&quot; 增加或者删除文件 # 添加指定文件到暂存区 $ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 $ git add [dir] # 添加当前目录的所有文件到暂存区 $ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached [file] #改名文件，并且将这个改名放入暂存区 $ git mv [file-original] [file-renamed] 提交代码 # 提交暂存区到仓库区 $ git commit -m [message] # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 关于分支 # 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] 标签 # 列出所有tag $ git tag # 新建一个tag在当前commit $ git tag [tag] # 新建一个tag在指定commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag] 查看信息 # 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@{0 day ago}&quot; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog 远程同步 # 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all 撤销 # 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop 其他 # 生成一个可供发布的压缩包 $ git archive]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MarkDown使用语法]]></title>
      <url>2016%2F11%2F01%2FMarkDown%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[根据资料总结Markdown的优点有如下几点：MarkDown是纯文本，它的兼容性极强，几乎可以使用用所有文本编辑器打开并且编辑。专业的markdown编辑器可以让你专注于文字的编辑而不用关心排版布局。它的格式转换很方便方便，它的文本可以转换为html、电子书等。它的标语法有很好的可读性。 标题的几种格式：平时常用的的文本编辑器中大多是这样模式：输入文本、选中文本、设置标题格式等。而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如：1234567# 这是H1 # ## 这是H2 ## ### 这是H3 ### #### 这是H4 #### ##### 这是H5 ##### ###### 这是H6 ###### 这是H1这是H2这是H3这是H4这是H5这是H6注意：#之间建议保留一个字符空格，这个是标准的markDown语法。 列表的几种样式样式一 样式一 样式一 样式一 样式二 样式二 样式二 样式二 注意：-、和1. 后面都要和后面的文本要保留一个空格。 链接和图片的格式链接格式MarkDown语法中，插入链接是通过【文本】（网址）这样的语法格式实现的。例如：[百度]（www.baidu.com） 图片格式MarkDown语法中，插入链接是通过！【文本】（网址）这样的语法格式实现的。例如：！【图片名称】（图片地址）注意：插入图片和链接的语法很相似，只是在前面多添了一个感叹号。 引用的格式我们写作的时候，有时候经常引用别人的文字，所以我们需要加上引用格式。在MarkDown中，你只需要在你需要引用的文字前面加上&gt; 符号就好了，例如： 曾经沧海难为水，除却巫山不是云 注意：&gt;和后面文本之间要保留一个空格。 粗体和斜体的格式在MarkDwon的语法中，用两个*包含文本就是粗体的语法，用一个*包含文本就是斜体的语法。例如：曾经沧海难为水，除却巫山不是云 代码的引用格式如果只有一段代码没有分行就可以用\’扩起来。如果引用的代码有多行就可以三个点号`放于段首和段尾括起来,段首括起来要加一个回车或者直接按table键或四个空格表示代码块。例如： geren_qu.setOnClickListener(this); geren_wan.setOnClickListener(this); geren_pop_image.setOnClickListener(this); image_add_time.setOnClickListener(this); time_end.setOnClickListener(this); time_start.setOnClickListener(this); tv_shengcheng.setOnClickListener(this); ct_fuyongshuoming.setOnClickListener(this); ct_yaowujieshao.setOnClickListener(this); ct_yaowumingcheng.setOnClickListener(this); top_itv_back.setOnClickListener(this); 显示连接中带括号的图片 123![][1][1]: http://latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1 换行的方法你只需要在你想要换行的地方打两个空格，就会自动换行。 分隔符的格式如果你想写分隔符，可以新起一行输入一个减号。如果前后都有段落的时候，要空出一行，例如：-– 符号转义如果你不想你的秒速中用的markdown符号，比如,#,*等，但又不想它被转义，这个时候可以在这些符号前加反斜杠，如\\,\#,\*等进行避免。]]></content>
    </entry>

    
  
  
</search>
